#!/bin/bash
#
# Function: Convert a folder containing muktiple BMPs to JPGs.
# Author: Teddy Skarin
#

# Variables
inputArray=$#
inputDir=
outputDir=
logFile=
osType=
errCounter="0"
fileCount="0"
fileCountJpg="0"
fileExt[0]=[Bb][Mm][Pp]
fileExt[1]=jpg
fileError=

if test $# -lt 2; then
    echo "[ERR]:: Wrong number of inputs. At least 2 expected, $inputArray received."
    echo "[HLP]:: Usage, bmp2jpg.sh -s <sourcedir> -o <outputdir> -l <logfile>"
    exit 99
fi

function checkRc {
if test $1 -gt 0 ; then
    ((errCounter++))
    # Manuel debugger
    #echo "[DBG]:: $errCounter"
fi
}

while [ $# -gt 0 ];
do
    case $1 in
        -s)
            if test -d $2; then
                # Set source directory
                inputDir=$2
                # Remove any trailing / and set the absolutepath
                inputDir=$(readlink -f $inputDir)
                echo "@ Input directory set to, "$inputDir
              else
                echo "[ERR]:: Source directory dosent exists or isn't readable."
                echo "$(date +%F@%H:%M:%S) [ERR]:: Source directory, $inputDir dosent exists or isn't readable." >> $logFile
                exit 98
              fi
        ;;
        -o)
            if test -d $2; then
                # Set output directory
                outputDir=$2
                # Remove any trailing / and set the absolutepath
                outputDir=$(readlink -f $outputDir)
                echo "@ Output directory set to, "$outputDir
            else
              # Set output directory
                outputDir=$2
              # Try to create output directory
              echo -n "+ Trying to create output directory... "
              mkdir -p $outputDir >> /dev/null 2>&1
              checkRc $?
              if [ $errCounter -eq "0" ]; then
                  echo "success!"
                  # Remove any trailing / and set the absolutepath
                  outputDir=$(readlink -f $outputDir)
                  echo "@ Output directory set to, "$outputDir
                else
                  echo "Failed!"
                  echo "! Exiting[$errCounter]. Please take care."
                  exit $errCounter
               fi
            fi        
            ;;
        -l)
            if test ! -e $2; then
                # Set source directory
                logFile=$2
                echo "@ Logfile set to, "$logFile
              else
                echo "[ERR]:: Logfile already exists, please take care."
                echo "! Exiting. Please take care."
                exit 97
              fi
        ;;
        #*)
        #echo default: $1
      esac
    shift
done

# Clearing errCounter
errCounter=0

# Setting autogenerated logfile
if test ! $logFile; then
    # Check OS version
    osType=$(echo $(uname))
    
    case $osType in
      Linux)
        osType=${osType:0:1}
        logFile=$(date +/tmp/bmp2jpg_%s_%N.log)
      ;;
      Darwin)
        osType=${osType:0:1}
        logFile=$(date +/tmp/bmp2jpg_%s.log)
      ;;
      *)
      # Default *nix type
        osType=${osType:0:1}
        logFile=$(date +/tmp/bmp2jpg_%F_%S.log)
    esac
    echo -n "+ Trying to create logfile... "
    touch $logFile >> /dev/null 2>&1
    checkRc $?
    if [ $errCounter -eq "0" ]; then
       echo "success!"
       echo "@ Logfile[$osType] created, "$logFile
       # Log
       echo "$(date +%F@%H:%M:%S) Logfile sucessfully created." >> $logFile
    else
       echo "Failed!"
       echo "! Exiting[$errCounter]. Please take care."
       # Log error
       echo "$(date +%F@%H:%M:%S) [ERR]:: Logfile couldnt be created." >> $logFile
       exit $errCounter
    fi
fi

# preFlightCheck done

## Main script

# Reset errCounter
errCounter=0

# Count number of BMP files
fileCount=$(find $inputDir -maxdepth 1 -name *.${fileExt[0]} |wc -l |tr -d " ") 
matchCount=$fileCount

# Create fileArray
fileArray=$(find $inputDir -maxdepth 1 -name *.${fileExt[0]})


# Check fileCount
if test $fileCount -gt "0" ; then
    echo "+ $fileCount file(s) found."
  else
    echo "! $fileCount file(s) found. Exiting."
    exit 96
fi

# Log start of process
echo "$(date +%F@%H:%M:%S) Starting rename process..." >> $logFile

# Loop through fileArray and convert BMP file(s) to jpgs
for file in $fileArray
do
    fileLoop=$(basename $file | sed 's/'${fileExt[0]}'$/'${fileExt[1]}'/g')
    convert $file -quality 80 $outputDir/$fileLoop >> /dev/null 2>&1
    checkRc $?
    if test $errCounter -eq "0" ; then
      ((fileCount--))
      echo -n "."
    else
      # Log error
      echo -n "!"
      echo "$(date +%F@%H:%M:%S) [ERR]:: Error converting $file" >> $logFile
      # Reset errCounter
      errCounter="0"
    fi
done
echo "D"

# Count converted jpgs
fileCountJpg=$(find $outputDir -maxdepth 1 -name *.${fileExt[1]} |wc -l |tr -d " ")

# Check both conditions are fullfilled
# fileCount is 0 and that matchCount and fileCountJpg has the same value
if test $fileCount -eq "0" -a $fileCountJpg -eq $matchCount ; then
    echo "+ All files processed OK."
    echo "$(date +%F@%H:%M:%S) All $matchCount files processed OK." >> $logFile
    exit $fileCount
else
    echo "! $fileCount not processed. Please see logfile for further information".
    echo "$(date +%F@%H:%M:%S) [ERR]:: $fileCount of $matchCount file(s) not processed." >> $logFile
    echo "$(date +%F@%H:%M:%S) [ERR]:: Please take action." >> $logFile
    exit 95
fi
